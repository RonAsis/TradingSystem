package com.wsep202.TradingSystem.service.user_service;import com.wsep202.TradingSystem.dto.*;import javafx.util.Pair;import lombok.Getter;import org.springframework.web.multipart.MultipartFile;import java.util.List;import java.util.UUID;@Getterpublic class ServiceTestsHelper {    GuestService guestService;    BuyerRegisteredService buyerRegisteredService;    SellerOwnerService sellerOwnerService;    ProductDto product;    private ProductDto productDto;    public ServiceTestsHelper(GuestService guestService, BuyerRegisteredService buyerRegisteredService){        this.guestService = guestService;        this.buyerRegisteredService = buyerRegisteredService;    }    public ServiceTestsHelper(GuestService guestService, BuyerRegisteredService buyerRegisteredService,                              SellerOwnerService sellerOwnerService){        this.guestService = guestService;        this.buyerRegisteredService = buyerRegisteredService;        this.sellerOwnerService = sellerOwnerService;    }    /**     * register user into the system     */    public boolean registerUser(String username,                                String password,                                String firstName,                                String lastName,                                MultipartFile image) {        return this.guestService.registerUser(username, password,                firstName,lastName, image);    }    /**     * login a user into the system     */    public Pair<UUID, Boolean> loginUser(String username, String password) {        return this.guestService.login(username, password);    }    /**     * logout a user from the system     */    public boolean logoutUser(String username, UUID uuid) {        return this.buyerRegisteredService.logout(username, uuid);    }    /**     * opening a new store and adding a product to it     */    public ProductDto openStoreAndAddProducts(UserSystemDto owner, String ownerPassword, UUID uuid){        // opening a new store, owned by owner        StoreDto store = new StoreDto(0, "storeName", null, "description", 0);        this.buyerRegisteredService.openStore(owner.getUserName(), store.getStoreName(),                store.getDescription(), uuid);        // adding a product to the owner's store        this.product = this.sellerOwnerService.addProduct(owner.getUserName(), store.getStoreId(),                "motor", "motors", 20, 20, uuid);        return this.product;    }    /**     * opening a new store and adding a product to it     */    public ProductDto openStoreAndAddProducts(){        UserSystemDto owner = new UserSystemDto("owner","owner","owner");        String ownerPassword = "password";        // registering the owner        this.registerUser(owner.getUserName(), ownerPassword,                owner.getFirstName(), owner.getLastName(), null);        // login the user        Pair<UUID, Boolean> returnedValue = this.loginUser(owner.getUserName(), ownerPassword);        // opening a new store, owned by owner        StoreDto store = new StoreDto(0, "storeName", null, "description", 0);        this.buyerRegisteredService.openStore(owner.getUserName(), store.getStoreName(),                store.getDescription(), returnedValue.getKey());        // adding a product to the owner's store        this.product = this.sellerOwnerService.addProduct(owner.getUserName(), store.getStoreId(),                "motor", "motors", 20, 20, returnedValue.getKey());        // owner logout        logoutUser(owner.getUserName(), returnedValue.getKey());        return this.product;    }    /**     * buying a product from the store     */    public List<ReceiptDto> addAndPurchaseProduct(String username, UUID uuid){        addProductToShoppingCart(username, uuid);        PaymentDetailsDto paymentDetailsDto = new PaymentDetailsDto("123456789",                798, "123456789");        BillingAddressDto billingAddressDto = new BillingAddressDto(username,                "address", "city", "country", "1234567");        PurchaseRegisterBuyerDto purchaseRegisterBuyerDto = new PurchaseRegisterBuyerDto(                paymentDetailsDto, billingAddressDto);        return this.buyerRegisteredService.purchaseShoppingCartBuyer(username,                purchaseRegisterBuyerDto, uuid);    }    public boolean addProductToShoppingCart(String username, UUID uuid) {        int amount = 1;        this.productDto = openStoreAndAddProducts();        return this.buyerRegisteredService.addProductToShoppingCart(username, amount, productDto, uuid);    }    public ProductDto openStoreAddProductsAndAddProductToShoppingCart(String username, UUID uuid){        addProductToShoppingCart(username, uuid);        return this.productDto;    }    public List<ReceiptDto> openStoreAddProductsAndPurchaseShoppingCart(String username, UUID uuid){        addProductToShoppingCart(username, uuid);        return addAndPurchaseProduct(username, uuid);    }    public ManagerDto openStoreAddProductsAndAddManager(UserSystemDto userSystemDto, UUID uuid, String password, String newManager){        String username = userSystemDto.getUserName();        openStoreAndAddProducts(userSystemDto, password, uuid);        return this.sellerOwnerService.addManager(username, 0, newManager, uuid);    }    public List<ReceiptDto> openStoreAddProductsAndBuyProduct(UserSystemDto userSystemDto, UUID uuid, String password){        String username = userSystemDto.getUserName();        openStoreAndAddProducts(userSystemDto, password, uuid);        PaymentDetailsDto paymentDetailsDto = new PaymentDetailsDto("123456789",                798, "123456789");        BillingAddressDto billingAddressDto = new BillingAddressDto(username,                "address", "city", "country", "1234567");        PurchaseRegisterBuyerDto purchaseRegisterBuyerDto = new PurchaseRegisterBuyerDto(                paymentDetailsDto, billingAddressDto);        return this.buyerRegisteredService.purchaseShoppingCartBuyer(username,                purchaseRegisterBuyerDto, uuid);    }}