Index: src/main/java/com/wsep202/TradingSystem/web/controllers/GuestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wsep202.TradingSystem.web.controllers;\r\n\r\nimport com.wsep202.TradingSystem.dto.*;\r\nimport com.wsep202.TradingSystem.service.user_service.GuestService;\r\nimport com.wsep202.TradingSystem.service.user_service.NotificationService;\r\nimport com.wsep202.TradingSystem.web.controllers.api.PublicApiPaths;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport javafx.util.Pair;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.UUID;\r\n\r\n@Slf4j\r\n@RestController\r\n@RequestMapping(PublicApiPaths.GUEST_PATH)\r\n@CrossOrigin(origins = \"http://localhost:4200\")\r\n@Api(value = \"API to guest\", produces = \"application/json\")\r\n@RequiredArgsConstructor\r\npublic class GuestController {\r\n\r\n    private final GuestService guestService;\r\n    private final NotificationService notificationService;\r\n\r\n    /**\r\n     * register user to the system\r\n     * @param userName user to register - unique\r\n     */\r\n    @ApiOperation(value = \"register user\")\r\n    @PostMapping(\"register-user/{userName}/{password}/{firstName}/{lastName}\")\r\n    public boolean registerUser(@PathVariable String userName,\r\n                                @PathVariable String password,\r\n                                @PathVariable String firstName,\r\n                                @PathVariable String lastName,\r\n                                @RequestParam(value = \"imageFile\", required=false) MultipartFile image){\r\n        return guestService.registerUser(userName, password, firstName, lastName, image);\r\n    }\r\n\r\n    /**\r\n     * login user to the system\r\n     */\r\n    @ApiOperation(value = \"login\")\r\n    @PutMapping(\"login/{userName}/{password}\")\r\n    public Pair<UUID, Boolean> login(@PathVariable String userName,\r\n                                    @PathVariable String password){\r\n        Pair<UUID, Boolean> loginParam = guestService.login(userName, password);\r\n        return loginParam;\r\n    }\r\n\r\n    /**\r\n     * purchase shopping cart\r\n     * @param shoppingCartDto includes the bags of each store the user selected\r\n     * @param paymentDetailsDto    - charging info of the user\r\n     * @param billingAddressDto - the destination to deliver the purchases\r\n     */\r\n    @ApiOperation(value = \"purchase shopping cart guest\")\r\n    @PostMapping(\"purchase-shopping-cart-guest\")\r\n    public List<ReceiptDto> purchaseShoppingCartGuest(@RequestBody ShoppingCartDto shoppingCartDto,\r\n                                                      @RequestBody PaymentDetailsDto paymentDetailsDto,\r\n                                                      @RequestBody  BillingAddressDto billingAddressDto){\r\n        return guestService.purchaseShoppingCartGuest(shoppingCartDto, paymentDetailsDto, billingAddressDto);\r\n    }\r\n\r\n    /**\r\n     * get stores\r\n     */\r\n    @ApiOperation(value = \"get stores\")\r\n    @GetMapping(\"get-stores\")\r\n    public List<StoreDto> getStores() {\r\n        return guestService.getStores();\r\n    }\r\n\r\n    /**\r\n     * get products\r\n     */\r\n    @ApiOperation(value = \"get products\")\r\n    @GetMapping(\"get-products\")\r\n    public List<ProductDto> getProducts() {\r\n        return guestService.getProducts();\r\n    }\r\n\r\n    /**\r\n     * get stores\r\n     */\r\n    @ApiOperation(value = \"get categories\")\r\n    @GetMapping(\"get-categories\")\r\n    public List<String> getCategories() {\r\n        return guestService.getCategories();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/wsep202/TradingSystem/web/controllers/GuestController.java	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ src/main/java/com/wsep202/TradingSystem/web/controllers/GuestController.java	(date 1588782838354)
@@ -92,5 +92,14 @@
     public List<String> getCategories() {
         return guestService.getCategories();
     }
+
+    /**
+     * get Total Price Of ShoppingCart
+     */
+    @ApiOperation(value = " get Total Price Of ShoppingCart")
+    @GetMapping("get-total-price-of-shoppingCart")
+    public Pair<Double, Double> getTotalPriceOfShoppingCart(@RequestBody ShoppingCartDto shoppingCartDto){
+        return guestService.getTotalPriceOfShoppingCart(shoppingCartDto);
+    }
 }
 
Index: src/main/java/com/wsep202/TradingSystem/service/user_service/GuestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wsep202.TradingSystem.service.user_service;\r\n\r\n\r\nimport com.wsep202.TradingSystem.domain.trading_system_management.*;\r\nimport com.wsep202.TradingSystem.dto.*;\r\nimport javafx.util.Pair;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\n@Service\r\n@Slf4j\r\n@RequiredArgsConstructor\r\npublic class GuestService {\r\n\r\n    private final TradingSystemFacade tradingSystemFacade;\r\n\r\n    /**\r\n     * register user to the system\r\n     * @param username user to register - unique\r\n     * @param password\r\n     * @param firstName\r\n     * @param lastName\r\n     * @param image\r\n     * @return\r\n     */\r\n    public boolean registerUser(String username,\r\n                                String password,\r\n                                String firstName,\r\n                                String lastName,\r\n                                MultipartFile image){\r\n        return tradingSystemFacade.registerUser(username, password, firstName, lastName, image);\r\n    }\r\n\r\n    /**\r\n     * login user to the system\r\n     * @param username\r\n     * @param password\r\n     * @return\r\n     */\r\n    public Pair<UUID, Boolean> login(String username,\r\n                                     String password){\r\n        return tradingSystemFacade.login(username, password);\r\n    }\r\n\r\n    /**\r\n     * view store info by store id\r\n     * @param storeId\r\n     * @return\r\n     */\r\n    public StoreDto viewStoreInfo(int storeId){\r\n        return tradingSystemFacade.viewStoreInfo(storeId);\r\n    }\r\n\r\n    /**\r\n     * view product in store with store id info.\r\n     * @param storeId belongs to the product to view\r\n     * @param productId - product to see\r\n     * @return\r\n     */\r\n    public ProductDto viewProduct(int storeId, int productId){\r\n        return tradingSystemFacade.viewProduct(storeId, productId);\r\n    }\r\n\r\n    /**\r\n     *      * search product by productName\r\n     * @param productName\r\n     * @return\r\n     */\r\n    public List<ProductDto> searchProductByName(String productName){\r\n        return tradingSystemFacade.searchProductByName(productName);\r\n    }\r\n\r\n    /**\r\n     *      * search product by category\r\n     * @param category\r\n     * @return\r\n     */\r\n    public List<ProductDto> searchProductByCategory(String category){\r\n        return tradingSystemFacade.searchProductByCategory(category);\r\n    }\r\n\r\n    /**\r\n     *      * search product by KeyWords\r\n     * @param keyWords\r\n     * @return\r\n     */\r\n    public List<ProductDto> searchProductByKeyWords(List<String> keyWords){\r\n        return tradingSystemFacade.searchProductByKeyWords(keyWords);\r\n    }\r\n\r\n    /**\r\n     *      * filter products by range price\r\n     * @param products to filter\r\n     * thresholds:\r\n     * @param min\r\n     * @param max\r\n     * @return\r\n     */\r\n    public List<ProductDto> filterByRangePrice(List<ProductDto> products,\r\n                                               double min,\r\n                                               double max){\r\n        return tradingSystemFacade.filterByRangePrice(products, min, max);\r\n    }\r\n\r\n    /**\r\n     *      * filter products by product rank\r\n     * @param products to filter\r\n     * @param rank of product\r\n     * @return\r\n     */\r\n    public List<ProductDto> filterByProductRank(List<ProductDto> products,\r\n                                                int rank){\r\n        return tradingSystemFacade.filterByProductRank(products, rank);\r\n    }\r\n\r\n    /**\r\n     *      * filter products by store rank\r\n     * @param products\r\n     * @param rank - store rank to filter by\r\n     * @return\r\n     */\r\n    public List<ProductDto> filterByStoreRank(List<ProductDto> products,\r\n                                              int rank){\r\n        return tradingSystemFacade.filterByStoreRank(products, rank);\r\n    }\r\n\r\n    /**\r\n     *      * purchase shopping cart\r\n     * @param shoppingCart includes the bags of each store the user selected\r\n     * @param paymentDetails    - charging info of the user\r\n     * @param billingAddressDto - the destination to deliver the purchases\r\n     * @return\r\n     */\r\n    public List<ReceiptDto> purchaseShoppingCartGuest(ShoppingCartDto shoppingCart,\r\n                                                      PaymentDetailsDto paymentDetails,\r\n                                                      BillingAddressDto billingAddressDto){\r\n        return tradingSystemFacade.purchaseShoppingCart(shoppingCart, paymentDetails, billingAddressDto);\r\n    }\r\n\r\n    public List<StoreDto> getStores() {\r\n        return tradingSystemFacade.getStores();\r\n    }\r\n\r\n    public List<ProductDto> getProducts() {\r\n        return tradingSystemFacade.getProducts();\r\n    }\r\n\r\n    public List<String> getCategories() {\r\n        return tradingSystemFacade.getCategories();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/wsep202/TradingSystem/service/user_service/GuestService.java	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ src/main/java/com/wsep202/TradingSystem/service/user_service/GuestService.java	(date 1588782838493)
@@ -153,4 +153,8 @@
     public List<String> getCategories() {
         return tradingSystemFacade.getCategories();
     }
+
+    public Pair<Double, Double> getTotalPriceOfShoppingCart(ShoppingCartDto shoppingCartDto) {
+        return null;
+    }
 }
Index: src/test/java/com/wsep202/TradingSystem/domain/trading_system_management/ShoppingCartTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wsep202.TradingSystem.domain.trading_system_management;\r\n\r\nimport com.wsep202.TradingSystem.domain.trading_system_management.purchase.PurchasePolicy;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Nested;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.when;\r\n\r\nclass ShoppingCartTest {\r\n\r\n    /**\r\n     * Unit tests for ShoppingCart class\r\n     */\r\n    @Nested\r\n    public class ShoppingCartUnit {\r\n    ShoppingCart testShoppingCart;\r\n    ShoppingBag testShoppingBag1;\r\n    ShoppingBag testShoppingBag2;\r\n    ShoppingBag testShoppingBag3;\r\n    Store testStore1;\r\n    Store testStore2;\r\n    Store testStore3;\r\n    Product testProduct;\r\n    Product testProduct1;\r\n\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        testShoppingCart = new ShoppingCart();\r\n        testShoppingBag1 = mock(ShoppingBag.class);\r\n        testShoppingBag2 = mock(ShoppingBag.class);\r\n        testShoppingBag3 = mock(ShoppingBag.class);\r\n        testStore1 = mock(Store.class);\r\n        testStore2 = mock(Store.class);\r\n        testStore3 = mock(Store.class);\r\n        testProduct = mock(Product.class);\r\n        testProduct1 = mock(Product.class);\r\n        when(testShoppingBag1.getNumOfProductsInBag()).thenReturn(5);\r\n        when(testShoppingBag1.getTotalCostOfBag()).thenReturn(55.25);\r\n        when(testShoppingBag2.getNumOfProductsInBag()).thenReturn(2);\r\n        when(testShoppingBag2.getTotalCostOfBag()).thenReturn(99.1);\r\n        when(testShoppingBag3.getNumOfProductsInBag()).thenReturn(1);\r\n        when(testShoppingBag3.getTotalCostOfBag()).thenReturn(50.0);\r\n        when(testShoppingBag3.getStoreOfProduct()).thenReturn(testStore3);\r\n        when(testShoppingBag3.getProductAmount(testProduct)).thenReturn(1);\r\n        when(testShoppingBag2.getStoreOfProduct()).thenReturn(testStore3);\r\n        when(testShoppingBag1.getStoreOfProduct()).thenReturn(testStore3);\r\n        when(testStore1.getStoreId()).thenReturn(1);\r\n        when(testStore2.getStoreId()).thenReturn(2);\r\n        when(testStore3.getStoreId()).thenReturn(3);\r\n        when(testProduct.getName()).thenReturn(\"testProduct\");\r\n        when(testProduct.getCost()).thenReturn(50.0);\r\n        when(testProduct.getStoreId()).thenReturn(3);\r\n    }\r\n\r\n    /**\r\n     * This test check if the addBag method succeeds when the parameters\r\n     * are correct.\r\n     */\r\n    @Test\r\n    void addBagToCartSuccess() {\r\n        //check that the addition was successful\r\n        assertTrue(testShoppingCart.addBagToCart(testStore1,testShoppingBag1));\r\n        //check that the number of products in cart is correct\r\n        assertEquals(testShoppingBag1.getNumOfProductsInBag(),testShoppingCart.getNumOfProductsInCart());\r\n        //check if there is only 1 shopping bag in cart\r\n        assertEquals(1, testShoppingCart.getNumOfBagsInCart());\r\n        //check the total cost of the cart is correct\r\n        assertEquals(testShoppingBag1.getTotalCostOfBag(), testShoppingCart.getTotalCartCost());\r\n        //check that the addition was successful\r\n        assertTrue(testShoppingCart.addBagToCart(testStore2,testShoppingBag2));\r\n        //check that the number of products in cart is correct\r\n        assertEquals(testShoppingBag2.getNumOfProductsInBag()+testShoppingBag1.getNumOfProductsInBag(),testShoppingCart.getNumOfProductsInCart());\r\n        //check if there are 2 shopping bags in cart\r\n        assertEquals(2, testShoppingCart.getNumOfBagsInCart());\r\n        //check the total cost of the cart is correct\r\n        assertEquals(testShoppingBag1.getTotalCostOfBag()+testShoppingBag2.getTotalCostOfBag(), testShoppingCart.getTotalCartCost());\r\n    }\r\n\r\n    /**\r\n     * This test check if the addBag method fails when the parameters\r\n     * are wrong.\r\n     */\r\n    @Test\r\n    void addBagToCartFail() {\r\n        setUpForAddNRemoveNGetBag();\r\n        //check that the cart cant add a null object\r\n        assertFalse(testShoppingCart.addBagToCart(null, testShoppingBag2));\r\n        //check that the cart cant add a null object\r\n        assertFalse(testShoppingCart.addBagToCart(testStore2, null));\r\n        //check that the amount of bags didnt change after 2 wrong addition\r\n        assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        //check that the cart cant add the same bag twice\r\n        assertFalse(testShoppingCart.addBagToCart(testStore1,testShoppingBag1));\r\n        //check that the amount of bags didnt change after 2 wrong addition\r\n        assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        //check that the number of products in the cart is correct\r\n        assertEquals(testShoppingBag1.getNumOfProductsInBag(),testShoppingCart.getNumOfProductsInCart());\r\n        //check that the total cost of the cart is correct\r\n        assertEquals(testShoppingBag1.getTotalCostOfBag(),testShoppingCart.getTotalCartCost());\r\n    }\r\n\r\n    /**\r\n     * Adds a shopping bag to the cart\r\n     */\r\n    private void setUpForAddNRemoveNGetBag(){\r\n        Map<Store, ShoppingBag> shoppingBagsList = new HashMap<>();\r\n        shoppingBagsList.put(testStore1,testShoppingBag1);\r\n        testShoppingCart.setShoppingBagsList(shoppingBagsList);\r\n        testShoppingCart.setNumOfBagsInCart(1);\r\n        testShoppingCart.setNumOfProductsInCart(testShoppingBag1.getNumOfProductsInBag());\r\n        testShoppingCart.setTotalCartCost(testShoppingBag1.getTotalCostOfBag());\r\n    }\r\n\r\n    /**\r\n     * This test check if the removeBag method succeeds when the parameters\r\n     * are correct.\r\n     */\r\n    @Test\r\n    void removeBagFromCartSuccess() {\r\n        setUpForAddNRemoveNGetBag();\r\n        //check that there is 1 bag before delete\r\n        assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        //check that the remove of the bag was successful\r\n        assertTrue(testShoppingCart.removeBagFromCart(testStore1,testShoppingBag1));\r\n        //after remove check that there is no products in the bag\r\n        assertEquals(0,testShoppingCart.getNumOfProductsInCart());\r\n        //after remove check that cost is 0\r\n        assertEquals(0,testShoppingCart.getTotalCartCost());\r\n        //after remove check that there is no bags in the cart\r\n        assertEquals(0,testShoppingCart.getNumOfBagsInCart());\r\n    }\r\n\r\n    /**\r\n     * This test check if the removeProduct method fails when the parameters\r\n     * are wrong.\r\n     */\r\n    @Test\r\n    void removeBagFromCartFail() {\r\n        setUpForAddNRemoveNGetBag();\r\n        //check that there is 1 bag before delete\r\n        assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        //check that the cart does not remove a null object\r\n        assertFalse(testShoppingCart.removeBagFromCart(null,testShoppingBag2));\r\n        //check that the cart does not remove a null object\r\n        assertFalse(testShoppingCart.removeBagFromCart(testStore2,null));\r\n        //check that the cart does not remove a shopping bag that does not exists\r\n        assertFalse(testShoppingCart.removeBagFromCart(testStore2,testShoppingBag2));\r\n        //check after fail removes the number of shopping bags didn't change\r\n        assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        //check after fail removes the number of products in cart didn't change\r\n        assertEquals(testShoppingBag1.getNumOfProductsInBag(),testShoppingCart.getNumOfProductsInCart());\r\n        //check after fail removes the total cost of the bag didn't change\r\n        assertEquals(testShoppingBag1.getTotalCostOfBag(),testShoppingCart.getTotalCartCost());\r\n    }\r\n\r\n    /**\r\n     * This test check if the getBag method succeeds when the parameters\r\n     * are correct.\r\n     */\r\n    @Test\r\n    void getShoppingBagSuccess() {\r\n        setUpForAddNRemoveNGetBag();\r\n        //check that the cart returns the correct bag\r\n        assertEquals(testShoppingBag1,testShoppingCart.getShoppingBag(testStore1));\r\n    }\r\n\r\n    /**\r\n     * This test check if the getBag method fails when the parameters\r\n     * are wrong.\r\n     */\r\n    @Test\r\n    void getShoppingBagFail() {\r\n        setUpForAddNRemoveNGetBag();\r\n        //check that there is no shopping bag for a null object\r\n        assertNull(testShoppingCart.getShoppingBag(null));\r\n        //check that there is no shopping bag for a store that does not exists in cart\r\n        assertNull(testShoppingCart.getShoppingBag(testStore2));\r\n    }\r\n\r\n    /**\r\n     * This test check if the updateNumProduct method succeeds when the parameters\r\n     * are correct.\r\n     */\r\n    @Test\r\n    void removeProductInCartSuccess(){\r\n        setUpForRemoveProduct();\r\n        //before remove check there is 1 item in cart\r\n        assertEquals(1, testShoppingCart.getNumOfProductsInCart());\r\n        //before remove check there is 1 bag in cart\r\n        assertEquals(1, testShoppingCart.getNumOfBagsInCart());\r\n        //check that removal was successful\r\n        assertTrue(testShoppingCart.removeProductInCart(testStore3,testShoppingBag3,testProduct));\r\n        //check there is no items in cart\r\n        assertEquals(0, testShoppingCart.getNumOfProductsInCart());\r\n        //check there is no bags in cart\r\n        assertEquals(0, testShoppingCart.getNumOfBagsInCart());\r\n        //check that after removal the total cost of the cart is 0\r\n        assertEquals(0, testShoppingCart.getTotalCartCost());\r\n    }\r\n\r\n    /**\r\n     * This test check if the updateNumProduct method fails when the parameters\r\n     * are wrong.\r\n     */\r\n    @Test\r\n    void removeProductInCartFail(){\r\n        //can't remove null from cart\r\n        assertFalse(testShoppingCart.removeProductInCart(testStore3,null, testProduct));\r\n        //can't remove a product that does not exists in cart\r\n        assertFalse(testShoppingCart.removeProductInCart(testStore2,testShoppingBag2,testProduct));\r\n    }\r\n\r\n    /**\r\n     * This test check if the watchShoppingCart method succeeds when the parameters\r\n     * are correct.\r\n     */\r\n    @Test\r\n    void watchShoppingCartSuc(){\r\n        setUpWatch();\r\n        Map<Product, Integer> returnedProducts = testShoppingCart.watchShoppingCart();\r\n        assertTrue(returnedProducts.containsKey(testProduct));\r\n    }\r\n\r\n    /**\r\n     * This test check if the watchShoppingCart method fails when the parameters\r\n     * are wrong.\r\n     */\r\n    @Test\r\n    void watchShoppingCartFail(){\r\n        setUpWatch();\r\n        Map<Product, Integer> returnedProducts = testShoppingCart.watchShoppingCart();\r\n        assertFalse(returnedProducts.containsKey(testProduct1));\r\n    }\r\n\r\n        /**\r\n         * set up product and shopping bag for watchShoppingCart test\r\n         */\r\n    private void setUpWatch(){\r\n        Map<Product, Integer> products = new HashMap<>();\r\n        products.put(testProduct,1);\r\n        testShoppingBag3.setProductListFromStore(products);\r\n        when(testShoppingBag3.getProductListFromStore()).thenReturn(products);\r\n//        when(testProduct.getDiscountType()).thenReturn(DiscountType.VISIBLE_DISCOUNT);\r\n        Map<Store,ShoppingBag> bags= new HashMap<>();\r\n        bags.put(testStore3,testShoppingBag3);\r\n        testShoppingCart.setShoppingBagsList(bags);\r\n    }\r\n\r\n    /**\r\n     * Adds a shopping bag to the cart\r\n     */\r\n    private void setUpForRemoveProduct(){\r\n        Map<Product, Integer> productList = new HashMap<>();\r\n        productList.put(testProduct,1);\r\n        testShoppingBag3.setProductListFromStore(productList);\r\n        Map<Store, ShoppingBag> shoppingBagsList = new HashMap<>();\r\n        shoppingBagsList.put(testStore3,testShoppingBag3);\r\n        testShoppingCart.setShoppingBagsList(shoppingBagsList);\r\n        testShoppingCart.setNumOfBagsInCart(1);\r\n        testShoppingCart.setNumOfProductsInCart(testShoppingBag3.getNumOfProductsInBag());\r\n        testShoppingCart.setTotalCartCost(testShoppingBag3.getTotalCostOfBag());\r\n        testShoppingCart.setNumOfProductsInCart(1);\r\n        when(testShoppingBag3.getProductAmount(testProduct)).thenReturn(1);\r\n    }\r\n}\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////Integration//////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Integration tests for ShoppingCart class\r\n */\r\n@Nested\r\npublic class ShoppingCartIntegration {\r\n        ShoppingCart testShoppingCart;\r\n        ShoppingBag testShoppingBag1;\r\n        ShoppingBag testShoppingBag2;\r\n        ShoppingBag testShoppingBag3;\r\n        Store testStore1;\r\n        Store testStore2;\r\n        Store testStore3;\r\n        Product testProduct;\r\n        Product testProduct2;\r\n        Product testProduct3;\r\n\r\n        @BeforeEach\r\n        void setUp() {\r\n            testShoppingCart = new ShoppingCart();\r\n            testStore1 = Store.builder()\r\n                    .storeName(\"MovieStore\")\r\n//                    .purchasePolicy(new PurchasePolicy())\r\n//                    .discountPolicy(new DiscountPolicy())\r\n                    .build();\r\n            testStore2 = Store.builder()\r\n                    .storeName(\"MovieStoreVIP\")\r\n//                    .purchasePolicy(new PurchasePolicy())\r\n//                    .discountPolicy(new DiscountPolicy())\r\n                    .storeId(testStore1.getStoreId()+1)\r\n                    .build();\r\n            testStore3 = Store.builder()\r\n                    .storeName(\"Sports\")\r\n//                    .purchasePolicy(new PurchasePolicy())\r\n//                    .discountPolicy(new DiscountPolicy())\r\n                    .storeId(testStore2.getStoreId()+1)\r\n                    .build();\r\n            testShoppingBag1 = new ShoppingBag(testStore1);\r\n            testShoppingBag2 = new ShoppingBag(testStore2);\r\n            testShoppingBag3 = new ShoppingBag(testStore3);\r\n            testProduct = new Product(\"Hunger Games\", ProductCategory.BOOKS_MOVIES_MUSIC, 45, 12.9, testStore1.getStoreId());\r\n            testProduct2 = new Product(\"Harry Potter\", ProductCategory.BOOKS_MOVIES_MUSIC, 45, 12.9, testStore2.getStoreId());\r\n            testProduct3 = new Product(\"Golf club\", ProductCategory.SPORTING_GOODS, 100, 99.9, testStore3.getStoreId());\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & remove methods succeeds when the parameters\r\n         * are correct.\r\n         */\r\n         @Test void addAndRemoveSuccess(){\r\n             testShoppingCart.addBagToCart(testStore1,testShoppingBag1);\r\n             //check that the bag added to cart\r\n             assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n             //check that the cost is correct\r\n             assertEquals(testShoppingBag1.getTotalCostOfBag(),testShoppingCart.getTotalCartCost());\r\n             testShoppingCart.removeBagFromCart(testStore1,testShoppingBag1);\r\n             //check that the bag was removed\r\n             assertEquals(0,testShoppingCart.getNumOfBagsInCart());\r\n             // check that the cost is correct\r\n             assertEquals(0,testShoppingCart.getTotalCartCost());\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & remove methods fails when the parameters\r\n         * are wrong.\r\n         */\r\n        @Test\r\n        void addAndRemoveFail(){\r\n            testShoppingCart.addBagToCart(testStore1,testShoppingBag1);\r\n            //can't remove the bag because diff stores\r\n            assertFalse(testShoppingCart.removeBagFromCart(testStore2,testShoppingBag1));\r\n            //check that the number of bags didn't change\r\n            assertEquals(1,testShoppingCart.getNumOfBagsInCart());\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & get methods succeeds when the parameters\r\n         * are correct.\r\n         */\r\n        @Test\r\n        void addAndGetSuccess(){\r\n            testShoppingCart.addBagToCart(testStore1,testShoppingBag1);\r\n            //check that it's the same bag\r\n            assertEquals(testShoppingBag1, testShoppingCart.getShoppingBag(testStore1));\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & get methods fails when the parameters\r\n         * are wrong.\r\n         */\r\n        @Test\r\n        void addAndGetFail(){\r\n            testShoppingCart.addBagToCart(testStore1,testShoppingBag1);\r\n            //not the same store\r\n            assertNull(testShoppingCart.getShoppingBag(testStore2));\r\n        }\r\n\r\n        /**\r\n         * This test check if the remove & get methods succeeds when the parameters\r\n         * are correct.\r\n         */\r\n        @Test\r\n        void removeAndGetSuccess(){\r\n            SetUpForRemoveAndGet();\r\n            //check that the bag is not empty and holds testShoppingBag1\r\n            assertEquals(testShoppingBag1, testShoppingCart.getShoppingBag(testStore1));\r\n            testShoppingCart.removeBagFromCart(testStore1, testShoppingBag1);\r\n            //check that there is no bag to return for this store\r\n            assertNull(testShoppingCart.getShoppingBag(testStore1));\r\n        }\r\n\r\n        /**\r\n         * This test check if the remove & get methods fails when the parameters\r\n         * are wrong.\r\n         */\r\n        @Test\r\n        void removeAndGetFail(){\r\n            SetUpForRemoveAndGet();\r\n            testShoppingCart.removeBagFromCart(testStore1,testShoppingBag1);\r\n            //check that the second bag is still in cart\r\n            assertNotNull(testShoppingCart.getShoppingBag(testStore2));\r\n        }\r\n\r\n        /**\r\n         * This method adds bags to cart for remove and get tests\r\n         */\r\n        private void SetUpForRemoveAndGet(){\r\n            Map<Store, ShoppingBag> shoppingBagsList = new HashMap<>();\r\n            shoppingBagsList.put(testStore1,testShoppingBag1);\r\n            shoppingBagsList.put(testStore2,testShoppingBag2);\r\n            testShoppingCart.setShoppingBagsList(shoppingBagsList);\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & remove & get methods succeeds when the parameters\r\n         * are correct.\r\n         */\r\n        @Test\r\n        void addAndRemoveAndGetSuccess(){\r\n            assertTrue(testShoppingCart.addBagToCart(testStore1,testShoppingBag1));\r\n            //check that the correct bag is in the cart\r\n            assertEquals(testShoppingBag1, testShoppingCart.getShoppingBag(testStore1));\r\n            testShoppingCart.removeBagFromCart(testStore1,testShoppingBag1);\r\n            //check that there is no shopping bag for this store\r\n            assertNull(testShoppingCart.getShoppingBag(testStore1));\r\n        }\r\n\r\n        /**\r\n         * This test check if the add & remove & get methods fails when the parameters\r\n         * are wrong.\r\n         */\r\n        @Test\r\n        void addAndRemoveAndGetFail(){\r\n            testShoppingCart.addBagToCart(testStore1, testShoppingBag1);\r\n            //not the same store\r\n            assertNull(testShoppingCart.getShoppingBag(testStore2));\r\n            //can't remove a bag that does not exists in cart\r\n            assertFalse(testShoppingCart.removeBagFromCart(testStore2,testShoppingBag2));\r\n        }\r\n\r\n        /**\r\n         * This test check if the removeProduct method succeeds when the parameters\r\n         * are correct.\r\n         */\r\n        @Test\r\n        void removeProductFromCurtSuccess(){\r\n            setUpForRemoveProduct();\r\n            //before remove there is 1 item in the cart (added in set up)\r\n            assertEquals(1, testShoppingCart.getNumOfProductsInCart());\r\n            //check that the remove is successful\r\n            assertTrue(testShoppingCart.removeProductInCart(testStore3, testShoppingBag3, testProduct3));\r\n            //after remove there is no items in the cart\r\n            assertEquals(0, testShoppingCart.getNumOfProductsInCart());\r\n        }\r\n\r\n        /**\r\n         * This test check if the removeProduct method fails when the parameters\r\n         * are wrong.\r\n         */\r\n        @Test\r\n        void removeProductFromCurtFail(){\r\n            //can't remove a null product\r\n            assertFalse(testShoppingCart.removeProductInCart(testStore2, testShoppingBag2, null));\r\n            //can't remove a product that does not exists\r\n            assertFalse(testShoppingCart.removeProductInCart(testStore2, testShoppingBag2, testProduct2));\r\n        }\r\n\r\n        @Test\r\n        void watchShoppingCartSuc(){\r\n            //add products to cart\r\n            testShoppingBag3.addProductToBag(testProduct3,3);\r\n            testShoppingBag2.addProductToBag(testProduct2,2);\r\n            testShoppingCart.addBagToCart(testStore3,testShoppingBag3);\r\n            testShoppingCart.addBagToCart(testStore2,testShoppingBag2);\r\n            Map<Product,Integer> products = testShoppingCart.watchShoppingCart();\r\n            //check that the products that was added are the returned products\r\n            assertTrue(products.containsKey(testProduct3));\r\n            assertTrue(products.containsKey(testProduct2));\r\n        }\r\n\r\n        @Test\r\n        void watchShoppingCartFail(){\r\n            //add products to cart\r\n            testShoppingBag3.addProductToBag(testProduct3,3);\r\n            testShoppingCart.addBagToCart(testStore3,testShoppingBag3);\r\n            Map<Product,Integer> products = testShoppingCart.watchShoppingCart();\r\n            //false for product that was never added\r\n            assertFalse(products.containsKey(testProduct2));\r\n        }\r\n\r\n        /**\r\n         * set up for remove test, put a product to remove later\r\n         */\r\n        private void setUpForRemoveProduct(){\r\n                testShoppingBag3.addProductToBag(testProduct3,2);\r\n                testShoppingCart.addBagToCart(testStore3, testShoppingBag3);\r\n            }\r\n\r\n}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/wsep202/TradingSystem/domain/trading_system_management/ShoppingCartTest.java	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ src/test/java/com/wsep202/TradingSystem/domain/trading_system_management/ShoppingCartTest.java	(date 1588767521016)
@@ -113,7 +113,6 @@
         Map<Store, ShoppingBag> shoppingBagsList = new HashMap<>();
         shoppingBagsList.put(testStore1,testShoppingBag1);
         testShoppingCart.setShoppingBagsList(shoppingBagsList);
-        testShoppingCart.setNumOfBagsInCart(1);
         testShoppingCart.setNumOfProductsInCart(testShoppingBag1.getNumOfProductsInBag());
         testShoppingCart.setTotalCartCost(testShoppingBag1.getTotalCostOfBag());
     }
@@ -263,7 +262,6 @@
         Map<Store, ShoppingBag> shoppingBagsList = new HashMap<>();
         shoppingBagsList.put(testStore3,testShoppingBag3);
         testShoppingCart.setShoppingBagsList(shoppingBagsList);
-        testShoppingCart.setNumOfBagsInCart(1);
         testShoppingCart.setNumOfProductsInCart(testShoppingBag3.getNumOfProductsInBag());
         testShoppingCart.setTotalCartCost(testShoppingBag3.getTotalCostOfBag());
         testShoppingCart.setNumOfProductsInCart(1);
@@ -492,4 +490,4 @@
             }
 
 }
-}
\ No newline at end of file
+}
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/products.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Product} from '../../shared/product.model';\r\nimport {ProductService} from '../../services/product.service';\r\nimport {ProductListComponent} from './product-list/product-list.component';\r\nimport {Store} from '../../shared/store.model';\r\n\r\n@Component({\r\n  selector: 'app-products',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.css']\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n  selectedProduct: Product;\r\n  @Input() store: Store;\r\n  searchText;\r\n\r\n  constructor(private productService: ProductService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.productService.productSelectedEvent\r\n      .subscribe(\r\n        (product: Product) => {\r\n          this.selectedProduct = product;\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/products.component.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/products.component.ts	(date 1588767522107)
@@ -12,7 +12,6 @@
 export class ProductsComponent implements OnInit {
   selectedProduct: Product;
   @Input() store: Store;
-  searchText;
 
   constructor(private productService: ProductService) { }
 
Index: tradingSystemPresentation/TradingSystemWeb/src/app/pipes/map-to-array.pipe.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'mapToArray'\r\n})\r\nexport class MapToArrayPipe implements PipeTransform {\r\n\r\n  transform(map: Map<any, any>): any[] {\r\n    const ret = [];\r\n\r\n    map.forEach((val, key) => {\r\n      ret.push({\r\n        key,\r\n        val\r\n      });\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/pipes/map-to-array.pipe.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/pipes/map-to-array.pipe.ts	(date 1588777571639)
@@ -9,12 +9,11 @@
     const ret = [];
 
     map.forEach((val, key) => {
-      ret.push({
+      ret.push({k:
         key,
-        val
+        v: val
       });
     });
-
     return ret;
   }
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_06_05_2020_15_17__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_06_05_2020_15_17__Default_Changelist_.xml	(date 1588767582160)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_06_05_2020_15_17__Default_Changelist_.xml	(date 1588767582160)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_06_05_2020_15_17_[Default_Changelist]" date="1588767534100" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_06_05_2020_15_17_[Default_Changelist]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 06/05/2020 15:17 [Default Changelist]" />
+</changelist>
\ No newline at end of file
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.css	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.css	(date 1588767522149)
@@ -1,0 +1,27 @@
+* {
+  box-sizing: border-box;
+}
+
+.cart-wrapper {
+  /*border: 1px solid lightslategrey;*/
+  color: darkslategray;
+  padding: 10px;
+  margin-top: 20px;
+}
+
+
+.panel-heading {
+  font-family: 'Lato', sans-serif;
+  justify-content: space-between;
+  color: #436f85;
+  display: flex;
+  text-align: center;
+}
+
+.panel-heading > div {
+  flex-grow: 1;
+}
+
+.panel-footer {
+  text-align: right;
+}
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/header-guest/header-guest.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header-guest',\r\n  templateUrl: './header-guest.component.html',\r\n  styleUrls: ['./header-guest.component.css']\r\n})\r\nexport class HeaderGuestComponent implements OnInit {\r\n  @Output() featureSelected = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSelect(feature: string) {\r\n    this.featureSelected.emit(feature);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/header-guest/header-guest.component.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/header-guest/header-guest.component.ts	(date 1588767522189)
@@ -1,4 +1,5 @@
 import {Component, EventEmitter, OnInit, Output} from '@angular/core';
+import {ShareService} from '../../services/share.service';
 
 @Component({
   selector: 'app-header-guest',
@@ -6,11 +7,14 @@
   styleUrls: ['./header-guest.component.css']
 })
 export class HeaderGuestComponent implements OnInit {
-  @Output() featureSelected = new EventEmitter<string>();
+  @Output() featureSelected;
 
-  constructor() { }
+  constructor(private shareService: ShareService) {
+    this.featureSelected = new EventEmitter<string>();
+  }
 
   ngOnInit(): void {
+    this.shareService.featureSelected.subscribe(feature => this.onSelect(feature));
   }
 
   onSelect(feature: string) {
Index: tradingSystemPresentation/TradingSystemWeb/src/app/services/http.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Store} from '../shared/store.model';\r\nimport {ShoppingCart} from '../shared/shoppingCart.model';\r\nimport {PaymentDetails} from '../shared/paymentDetails.model';\r\nimport {BillingAddress} from '../shared/billingAddress.model';\r\nimport {Product} from '../shared/product.model';\r\nimport {Receipt} from '../shared/receipt.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  // server\r\n  private readonly serverUrl: string;\r\n  // services urls\r\n  private readonly guestUrl: string;\r\n  private readonly buyerUrl: string;\r\n  private readonly adminUrl: string;\r\n  private readonly sellerManagerUrl: string;\r\n  private readonly sellerOwnerUrl: string;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // initial server url\r\n    this.serverUrl = 'http://localhost:8080';\r\n    // initial urls of services\r\n    this.guestUrl = this.serverUrl + '/guest';\r\n    this.buyerUrl = this.serverUrl + '/buyer-reg';\r\n    this.adminUrl = this.serverUrl + '/admin';\r\n    this.sellerManagerUrl = this.serverUrl + '/seller-manager';\r\n    this.sellerOwnerUrl = this.serverUrl + '/seller-owner';\r\n  }\r\n\r\n  //////////////////////////// GuestController ///////////////////////////\r\n\r\n  public registerUser(username: string, password: string, firstName: string, lastName: string, image: File) {\r\n    const url = `${this.guestUrl}/` + 'register-user/' +\r\n      `${username}/` +\r\n      `${password}/` +\r\n      `${firstName}/` +\r\n      `${lastName}`;\r\n    return this.http.post<boolean>(\r\n      url, this.getImageHttpFormat(image));\r\n  }\r\n\r\n  public login(username: string, password: string) {\r\n    const url = `${this.guestUrl}/` + 'login/' +\r\n      `${username}/` +\r\n      `${password}`;\r\n    return this.http.put<{ key: string; value: boolean }>(\r\n      url, null);\r\n  }\r\n\r\n  // use for store info\r\n  public getStores() {\r\n    const url = `${this.guestUrl}/` + 'get-stores/';\r\n    return this.http.get<Store[]>(\r\n      url);\r\n  }\r\n\r\n  // use for products info\r\n  public getProducts() {\r\n    const url = `${this.guestUrl}/` + 'get-products/';\r\n    return this.http.get<Product[]>(\r\n      url);\r\n  }\r\n\r\n  public purchaseShoppingCartGuest(shoppingCart: ShoppingCart,\r\n                                   paymentDetails: PaymentDetails,\r\n                                   billingAddress: BillingAddress) {\r\n    const url = `${this.guestUrl}/` + 'purchase-shopping-cart-guest/';\r\n    return this.http.post(url,\r\n      {shoppingCartDto: shoppingCart, paymentDetailsDto: paymentDetails, billingAddressDto: billingAddress});\r\n  }\r\n\r\n  // use for products info\r\n  public getCategories() {\r\n    const url = `${this.guestUrl}/` + 'get-categories/';\r\n    return this.http.get<string[]>(\r\n      url);\r\n  }\r\n\r\n  //////////////////////////// BuyerRegisteredController ///////////////////////////\r\n\r\n  public logout(username: string, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'logout/' +\r\n      `${username}/` +\r\n      `${uuid}`;\r\n    return this.http.put<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public openStore(usernameOwner: string, storeName: string, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'open-store/' +\r\n      `${usernameOwner}/` +\r\n      `${storeName}/` +\r\n      `${uuid}/`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public viewPurchaseHistory(username: string, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'view-purchase-history/' +\r\n      `${username}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  public saveProductInShoppingBag(username: string, storeId: number, productSn: number,\r\n                                  amount: number, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'save-product-in-shopping-bag/' +\r\n      `${username}/` +\r\n      `${storeId}/` +\r\n      `${productSn}/` +\r\n      `${amount}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public viewProductsInShoppingCart(username: string, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'view-products-in-shopping-cart/' +\r\n      `${username}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  public removeProductInShoppingBag(username: string, storeId: number, productSn: number, uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'remove-product-in-shopping-bag/' +\r\n      `${username}/` +\r\n      `${storeId}/` +\r\n      `${productSn}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public purchaseShoppingCartBuyer(username: string,\r\n                                   paymentDetails: PaymentDetails,\r\n                                   billingAddress: BillingAddress,\r\n                                   uuid: string) {\r\n    const url = `${this.buyerUrl}/` + 'purchase-shopping-cart-buyer/' +\r\n      `${username}/` +\r\n      `${uuid}`;\r\n    return this.http.post(url,\r\n      {paymentDetailsDto: paymentDetails, billingAddressDto: billingAddress});\r\n  }\r\n\r\n  //////////////////////////// AdministratorController ///////////////////////////\r\n\r\n  public viewPurchaseHistoryStoreByAdmin(administratorUsername: string, storeId: number, uuid: string) {\r\n    const url = `${this.adminUrl}/` + 'view-purchase-history-store/' +\r\n      `${administratorUsername}/` +\r\n      `${storeId}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  public viewPurchaseHistoryUserByAdmin(administratorUsername: string, username: string, uuid: string) {\r\n    const url = `${this.adminUrl}/` + 'view-purchase-history-user/' +\r\n      `${administratorUsername}/` +\r\n      `${username}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  //////////////////////////// SellerManagerController ///////////////////////////\r\n\r\n  public viewPurchaseHistoryOfManager(username: string, storeId: number, uuid: string) {\r\n    const url = `${this.sellerManagerUrl}/` + 'view-purchase-history-of-manager/' +\r\n      `${username}/` +\r\n      `${storeId}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  public getManageStores(manageUsername: string, uuid: string) {\r\n    const url = `${this.sellerManagerUrl}/` + 'get-manage-stores/' +\r\n      `${manageUsername}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Store[]>(\r\n      url);\r\n  }\r\n\r\n  public getOperationsCanDo(manageUsername: string, storeId: string, uuid: string){\r\n    const url = `${this.sellerManagerUrl}/` + 'get-operations-can-do/' +\r\n      `${manageUsername}/` +\r\n      `${storeId}/` +\r\n      `${uuid}`;\r\n    return this.http.get<string[]>(\r\n      url);\r\n  }\r\n\r\n  //////////////////////////// SellerOwnerController ///////////////////////////\r\n\r\n  public viewPurchaseHistoryOfOwner(ownerUsername: string, storeId: number, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'view-purchase-history-of-owner/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Receipt[]>(\r\n      url);\r\n  }\r\n\r\n  public addProduct(ownerUsername: string, storeId: number, productName: string,\r\n                    category: string, amount: number, cost: number, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'add-product/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${productName}/` +\r\n      `${category}/` +\r\n      `${amount}/` +\r\n      `${cost}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public deleteProductFromStore(ownerUsername: string, storeId: number, productSn: number, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'delete-product-from-store/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${productSn}/` +\r\n      `${uuid}`;\r\n    return this.http.put<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public editProduct(ownerUsername: string, storeId: number, productSn: number, productName: string,\r\n                     category: string, amount: number, cost: number, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'edit-product/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${productSn}/` +\r\n      `${productName}/` +\r\n      `${category}/` +\r\n      `${amount}/` +\r\n      `${cost}/` +\r\n      `${uuid}`;\r\n    return this.http.put<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public addOwner(ownerUsername: string, storeId: number, newOwnerUsername: string, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'add-owner/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${newOwnerUsername}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public removeManager(ownerUsername: string, storeId: number, managerUsername: string, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'remove-manager/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${managerUsername}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public addPermission(ownerUsername: string, storeId: number, managerUsername: string, permission: string, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'add-permission/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${managerUsername}/` +\r\n      `${permission}/` +\r\n      `${uuid}`;\r\n    return this.http.put<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public addManager(ownerUsername: string, storeId: number, newManagerUsername: string, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'add-manager/' +\r\n      `${ownerUsername}/` +\r\n      `${storeId}/` +\r\n      `${newManagerUsername}/` +\r\n      `${uuid}`;\r\n    return this.http.post<boolean>(\r\n      url, null);\r\n  }\r\n\r\n  public getOwnerStores(ownerUsername: string, uuid: string) {\r\n    const url = `${this.sellerOwnerUrl}/` + 'get-owner-stores/' +\r\n      `${ownerUsername}/` +\r\n      `${uuid}`;\r\n    return this.http.get<Store[]>(\r\n      url);\r\n  }\r\n\r\n  public getAllOperationOfManger() {\r\n    const url = `${this.sellerOwnerUrl}/` + 'get-all-operation-manager/';\r\n    return this.http.get<Store[]>(\r\n      url);\r\n  }\r\n\r\n\r\n  //////////////////////////////////////// general /////////////////////////////\r\n\r\n  private getImageHttpFormat(image: File){\r\n    const uploadImageData = new FormData();\r\n    if (image !== null && image !== undefined) {\r\n      console.log('file define');\r\n      uploadImageData.append('imageFile', image, image.name);\r\n    }\r\n    return uploadImageData;\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/services/http.service.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/services/http.service.ts	(date 1588782838316)
@@ -80,6 +80,12 @@
       url);
   }
 
+
+  getTotalPriceOfShoppingCart(shoppingCart: ShoppingCart) {
+    const url = `${this.guestUrl}/` + 'get-total-price-of-shoppingCart/';
+    return this.http.post<{totalPrice: number, priceAfterDiscount: number}>(
+      url, shoppingCart);
+  }
   //////////////////////////// BuyerRegisteredController ///////////////////////////
 
   public logout(username: string, uuid: string) {
Index: tradingSystemPresentation/TradingSystemWeb/src/app/app.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { GuestComponent } from './guest/guest.component';\r\nimport { BuyerComponent } from './logged-in-user/buyer/buyer.component';\r\nimport { SellerComponent } from './logged-in-user/seller/seller.component';\r\nimport { RegisterComponent } from './guest/register/register.component';\r\nimport { LoginComponent } from './guest/login/login.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HeaderGuestComponent } from './guest/header-guest/header-guest.component';\r\nimport { StoresComponent } from './guest/stores/stores.component';\r\nimport { ProductsComponent } from './guest/products/products.component';\r\nimport { ShoppingCartComponent } from './guest/shopping-cart/shopping-cart.component';\r\nimport { StoreItemComponent } from './guest/stores/store-list/store-item/store-item.component';\r\nimport { StoreListComponent } from './guest/stores/store-list/store-list.component';\r\nimport { StoreDetailComponent } from './guest/stores/store-detail/store-detail.component';\r\nimport {ProductListComponent} from './guest/products/product-list/product-list.component';\r\nimport {ProductDetailComponent} from './guest/products/product-detail/product-detail.component';\r\nimport { ProductItemComponent } from './guest/products/product-list/product-item/product-item.component';\r\nimport { NgxBootstrapSliderModule } from 'ngx-bootstrap-slider';\r\nimport { Ng5SliderModule } from 'ng5-slider';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\nimport {FormsModule} from '@angular/forms';\r\nimport { ProductRankPipe } from './pipes/product-rank.pipe';\r\nimport { RangePriceProductPipe } from './pipes/range-price-product.pipe';\r\nimport { StoreRankPipe } from './pipes/store-rank.pipe';\r\nimport { ProductCategoryPipe } from './pipes/product-category.pipe';\r\nimport { LogoutComponent } from './logged-in-user/logout/logout.component';\r\nimport { HistoryPurchaseComponent } from './logged-in-user/history-purchase/history-purchase.component';\r\nimport { OwnedStoresComponent } from './logged-in-user/owned-stores/owned-stores.component';\r\nimport { ManagedStoresComponent } from './logged-in-user/managed-stores/managed-stores.component';\r\nimport { OpenStoreComponent } from './logged-in-user/open-store/open-store.component';\r\nimport { ReceiptElementComponent } from './logged-in-user/history-purchase/recipet-element/receipt-element.component';\r\nimport { ProductInReceiptComponent } from './logged-in-user/history-purchase/recipet-element/product-in-receipt/product-in-receipt.component';\r\nimport { MapToArrayPipe } from './pipes/map-to-array.pipe';\r\nimport {LoggedInUserComponent} from './logged-in-user/logged-in-user.component';\r\nimport {HeaderLoggedInUserComponent} from './logged-in-user/header-logging-user/header-logging-user.component';\r\nimport { ReversePipe } from './pipes/reverse-pipe.pipe';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToasterModule} from 'angular2-toaster';\r\nimport { UsersComponent } from './logged-in-user/admin/users/users.component';\r\nimport {AdminComponent} from './logged-in-user/admin/admin.component';\r\nimport { UserElementComponent } from './logged-in-user/admin/users/user-list/user-element/user-element.component';\r\nimport { UserListComponent } from './logged-in-user/admin/users/user-list/user-list.component';\r\nimport { UserDetailComponent } from './logged-in-user/admin/users/user-detail/user-detail.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    GuestComponent,\r\n    SellerComponent,\r\n    BuyerComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    HeaderGuestComponent,\r\n    StoresComponent,\r\n    ProductsComponent,\r\n    ShoppingCartComponent,\r\n    StoreItemComponent,\r\n    StoreListComponent,\r\n    StoreDetailComponent,\r\n    ProductListComponent,\r\n    ProductDetailComponent,\r\n    ProductItemComponent,\r\n    ProductRankPipe,\r\n    RangePriceProductPipe,\r\n    StoreRankPipe,\r\n    ProductCategoryPipe,\r\n    LoggedInUserComponent,\r\n    LogoutComponent,\r\n    HistoryPurchaseComponent,\r\n    OwnedStoresComponent,\r\n    ManagedStoresComponent,\r\n    OpenStoreComponent,\r\n    ReceiptElementComponent,\r\n    ProductInReceiptComponent,\r\n    MapToArrayPipe,\r\n    HeaderLoggedInUserComponent,\r\n    ReversePipe,\r\n    UsersComponent,\r\n    AdminComponent,\r\n    UserElementComponent,\r\n    UserListComponent,\r\n    UserDetailComponent\r\n  ],\r\n  imports: [\r\n    Ng2SearchPipeModule,\r\n    Ng5SliderModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    ToasterModule.forRoot(),\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgxBootstrapSliderModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/app.module.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/app.module.ts	(date 1588768821489)
@@ -46,6 +46,9 @@
 import { UserElementComponent } from './logged-in-user/admin/users/user-list/user-element/user-element.component';
 import { UserListComponent } from './logged-in-user/admin/users/user-list/user-list.component';
 import { UserDetailComponent } from './logged-in-user/admin/users/user-detail/user-detail.component';
+import {ShoppingCartModule} from 'ng-shopping-cart';
+import {Product} from './shared/product.model';
+import { CartItemComponent } from './guest/shopping-cart/cart-item/cart-item.component';
 
 @NgModule({
   declarations: [
@@ -85,19 +88,28 @@
     AdminComponent,
     UserElementComponent,
     UserListComponent,
-    UserDetailComponent
+    UserDetailComponent,
+    CartItemComponent
   ],
-  imports: [
-    Ng2SearchPipeModule,
-    Ng5SliderModule,
-    BrowserModule,
-    BrowserAnimationsModule,
-    ToasterModule.forRoot(),
-    AppRoutingModule,
-    HttpClientModule,
-    NgxBootstrapSliderModule,
-    FormsModule
-  ],
+    imports: [
+        Ng2SearchPipeModule,
+        Ng5SliderModule,
+        BrowserModule,
+        BrowserAnimationsModule,
+        ToasterModule.forRoot(),
+        AppRoutingModule,
+        HttpClientModule,
+        NgxBootstrapSliderModule,
+        FormsModule,
+      ShoppingCartModule.forRoot({ // <-- Add the cart module to your root module
+        itemType: Product, // <-- Configuration is optional
+        serviceType: 'localStorage',
+        serviceOptions: {
+          storageKey: 'NgShoppingCart',
+          clearOnError: true
+        }
+        })
+    ],
   providers: [],
   bootstrap: [AppComponent]
 })
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"p-3 mb-2 bg-danger text-white\">\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n      <img [src]=\"\" [alt]=\"product.name\" class=\"img-responsive\"\r\n           style=\"max-height: 300px\"/>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-12 text-danger\">\r\n      <h1>{{product.name}}</h1>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n      <div class=\"btn-group\">\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"addToShoppingCart()\">\r\n          Add to shopping-cart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-sm-2 from-group group\">\r\n    <label for=\"amount\">Amount</label>\r\n    <input type=\"number\" min=\"1\" id=\"amount\" class=\"form-control\" #amountProducts/>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n      <p>Rank :{{product.rank}}</p>\r\n      <p>Amount :{{product.amount}}</p>\r\n      <p>Category :{{product.category}}</p>\r\n      <p>Cost :{{product.cost}}</p>\r\n      <p>Cost After Discount :{{product.costAfterDiscount}}</p>\r\n      <p>Purchase Type :{{product.purchaseType}}</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.html	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.html	(date 1588767503775)
@@ -11,6 +11,10 @@
     </div>
   </div>
   <div class="row">
+    <div class="col-sm-2 from-group group">
+      <label for="amount">Amount</label>
+      <input type="number" value="1" min="1" id="amount" class="form-control" #amountProducts/>
+    </div>
     <div class="col-xs-12">
       <div class="btn-group">
         <button type="button" class="btn btn-primary" (click)="addToShoppingCart()">
@@ -19,10 +23,7 @@
       </div>
     </div>
   </div>
-  <div class="col-sm-2 from-group group">
-    <label for="amount">Amount</label>
-    <input type="number" min="1" id="amount" class="form-control" #amountProducts/>
-  </div>
+
   <div class="row">
     <div class="col-xs-12">
       <p>Rank :{{product.rank}}</p>
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {Product} from '../../../shared/product.model';\r\nimport {UserService} from '../../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-product-detail',\r\n  templateUrl: './product-detail.component.html',\r\n  styleUrls: ['./product-detail.component.css']\r\n})\r\nexport class ProductDetailComponent implements OnInit {\r\n  @Input() product: Product;\r\n  @ViewChild('amountProducts', {static: false}) amountProducts: ElementRef;\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  addToShoppingCart() {\r\n    this.userService.addToShoppingCart(this.product, this.amountProducts.nativeElement.value);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-detail/product-detail.component.ts	(date 1588767503811)
@@ -1,6 +1,7 @@
 import {Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';
 import {Product} from '../../../shared/product.model';
 import {UserService} from '../../../services/user.service';
+import {ShareService} from '../../../services/share.service';
 
 @Component({
   selector: 'app-product-detail',
@@ -11,12 +12,13 @@
   @Input() product: Product;
   @ViewChild('amountProducts', {static: false}) amountProducts: ElementRef;
 
-  constructor(private userService: UserService) { }
+  constructor(private userService: UserService, private shareService: ShareService) { }
 
   ngOnInit(): void {
   }
 
   addToShoppingCart() {
     this.userService.addToShoppingCart(this.product, this.amountProducts.nativeElement.value);
+    this.shareService.featureSelected.emit('Shopping-cart');
   }
 }
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-list/product-list.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Product} from '../../../shared/product.model';\r\nimport {ProductService} from '../../../services/product.service';\r\nimport {LabelType, Options} from 'ng5-slider';\r\nimport {Store} from '../../../shared/store.model';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.css']\r\n})\r\nexport class ProductListComponent implements OnInit{\r\n  @Output() productWasSelected = new EventEmitter<Product>();\r\n  products: Product[];\r\n  @Input()store: Store;\r\n  searchText;\r\n\r\n  // for filter by product range\r\n  productRank = 1;\r\n  optionsRank: Options = {\r\n    showTicksValues: true,\r\n    stepsArray: [\r\n      {value: 1, legend: 'Very poor'},\r\n      {value: 2},\r\n      {value: 3, legend: 'Fair'},\r\n      {value: 4},\r\n      {value: 5, legend: 'Average'},\r\n      {value: 6},\r\n      {value: 7, legend: 'Good'},\r\n      {value: 8},\r\n      {value: 9, legend: 'Excellent'}\r\n    ]\r\n  };\r\n\r\n  // for filter by range price\r\n  minValue = 0;\r\n  maxValue = 100000;\r\n  optionsRangePrice: Options = {\r\n    floor: 0,\r\n    ceil: 100000,\r\n    translate: (value: number, label: LabelType): string => {\r\n      switch (label) {\r\n        case LabelType.Low:\r\n          return '<b>Min price:</b> $' + value;\r\n        case LabelType.High:\r\n          return '<b>Max price:</b> $' + value;\r\n        default:\r\n          return '$' + value;\r\n      }\r\n    }};\r\n\r\n  selectedCategory = 'All';\r\n  categories: string [] = [this.selectedCategory] ;\r\n\r\n  constructor(private productService: ProductService) {\r\n    this.productService.getCategories().subscribe(categories => this.categories.concat(categories));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.productService.filterByPriceEvent\r\n      .subscribe(\r\n        (range: {min: number, max: number}) => {\r\n          this.products = this.productService.filterByPrice(range);\r\n        });\r\n    if (this.store !== null && this.store !== undefined){\r\n      this.products = this.store.products;\r\n    }else {\r\n      this.productService.getProducts().subscribe(products => {\r\n        if (products !== null && products !== undefined) {\r\n          this.products = products;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onSelectCategory(category: string) {\r\n    this.selectedCategory = category;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-list/product-list.component.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/products/product-list/product-list.component.ts	(date 1588767515808)
@@ -9,10 +9,10 @@
   templateUrl: './product-list.component.html',
   styleUrls: ['./product-list.component.css']
 })
-export class ProductListComponent implements OnInit{
+export class ProductListComponent implements OnInit {
   @Output() productWasSelected = new EventEmitter<Product>();
   products: Product[];
-  @Input()store: Store;
+  @Input() store: Store;
   searchText;
 
   // for filter by product range
@@ -47,24 +47,30 @@
         default:
           return '$' + value;
       }
-    }};
+    }
+  };
 
   selectedCategory = 'All';
-  categories: string [] = [this.selectedCategory] ;
+  categories: string [] = [this.selectedCategory];
 
   constructor(private productService: ProductService) {
-    this.productService.getCategories().subscribe(categories => this.categories.concat(categories));
+    this.productService.getCategories().subscribe(categories => {
+        if (categories !== null && categories !== undefined) {
+          this.categories = this.categories.concat(categories);
+        }
+      }
+    );
   }
 
   ngOnInit(): void {
     this.productService.filterByPriceEvent
       .subscribe(
-        (range: {min: number, max: number}) => {
+        (range: { min: number, max: number }) => {
           this.products = this.productService.filterByPrice(range);
         });
-    if (this.store !== null && this.store !== undefined){
+    if (this.store !== null && this.store !== undefined) {
       this.products = this.store.products;
-    }else {
+    } else {
       this.productService.getProducts().subscribe(products => {
         if (products !== null && products !== undefined) {
           this.products = products;
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><p>shopping-cart works!</p>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.html	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.html	(date 1588779301110)
@@ -1,1 +1,28 @@
-<p>shopping-cart works!</p>
+<div class="cart-wrapper">
+  <div class="panel panel-default">
+    <!-- Default panel contents -->
+    <div class="panel-heading">
+      <div>Item Name</div>
+      <div>Price</div>
+      <div>Amount</div>
+      <div>Total Price</div>
+      <div></div>
+    </div>
+
+    <!-- Table -->
+    <div class="list-group">
+      <app-cart-item
+        class="list-group-item"
+        *ngFor="let item of cartItems | mapToArray"
+        [cartItem]="item"
+        (cartItemDeleted)="onCartItemDeleted($event)"
+        (cartItemChanged)="onCartItemChanged($event)"
+      >
+      </app-cart-item>
+    </div>
+    <div class="panel-footer">
+      <h4>Total {{cartTotal}}</h4>
+      <h4>Total After Discount {{cartTotalAfterDiscount}}</h4>
+    </div>
+  </div>
+</div>
Index: tradingSystemPresentation/TradingSystemWeb/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/package-lock.json	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/package-lock.json	(date 1588767521308)
@@ -7584,6 +7584,14 @@
       "resolved": "https://registry.npmjs.org/next-tick/-/next-tick-1.0.0.tgz",
       "integrity": "sha1-yobR/ogoFpsBICCOPchCS524NCw="
     },
+    "ng-shopping-cart": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ng-shopping-cart/-/ng-shopping-cart-1.0.0.tgz",
+      "integrity": "sha512-4baqhbwzWr1odZvHZ+QkgnxuXvmJgT/FynjNWOHcTw3oqqtBzg4T3CNwzwQ0k5BXLKBPP4qiRL2uYbKyHRSr3w==",
+      "requires": {
+        "tslib": "^1.7.1"
+      }
+    },
     "ng-snotify": {
       "version": "9.0.1",
       "resolved": "https://registry.npmjs.org/ng-snotify/-/ng-snotify-9.0.1.tgz",
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-shopping-cart',\r\n  templateUrl: './shopping-cart.component.html',\r\n  styleUrls: ['./shopping-cart.component.css']\r\n})\r\nexport class ShoppingCartComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/shopping-cart.component.ts	(date 1588782527520)
@@ -1,4 +1,8 @@
-import { Component, OnInit } from '@angular/core';
+import {Component, OnInit, EventEmitter, Output, Input} from '@angular/core';
+import {Product} from '../../shared/product.model';
+import {UserService} from '../../services/user.service';
+import {ShoppingCart} from '../../shared/shoppingCart.model';
+import {Observable} from 'rxjs';
 
 @Component({
   selector: 'app-shopping-cart',
@@ -7,9 +11,50 @@
 })
 export class ShoppingCartComponent implements OnInit {
 
-  constructor() { }
+  @Input() cartTotal: number;
+  @Input() cartTotalAfterDiscount: number;
+  @Input() cartItems: Map<Product , number> ;
+
+  @Output() cartItemDeleted = new EventEmitter<{
+    productSn: number,
+    storeId: number
+  }>();
+  @Output() cartItemChanged = new EventEmitter<{
+    productSn: number,
+    storeId: number
+  }>();
+  constructor(private userService: UserService) { }
 
   ngOnInit(): void {
+    this.getShoppingCart();
+    }
+
+  private getShoppingCart() {
+    this.userService.getShoppingCart().subscribe((shoppingCart) => {
+      if (shoppingCart !== null && shoppingCart !== undefined) {
+        this.cartItems = Array.from(shoppingCart.shoppingBags.values())
+          .reduce((acc, cur) => {
+            cur.productListFromStore.forEach((value, key) => acc.set(key, value));
+            return acc;
+          }, new Map<Product, number>());
+      }
+    });
+  }
+
+  onCartItemDeleted(productData: { productSn: number, storeId: number }) {
+    this.userService.removeCartItem(productData.productSn, productData.storeId);
+    this.getShoppingCart();
+    this.userService.getTotalPrice();
   }
+
+  onCartItemChanged(productData: { productSn: number, storeId: number }) {
+    this.cartItemChanged.emit({
+      productSn: productData.productSn,
+      storeId: productData.storeId
+    });
+    this.userService.getTotalPriceOfShoppingCart();
+  }
+
+
 
 }
Index: tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.spec.ts	(date 1588767522173)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.spec.ts	(date 1588767522173)
@@ -0,0 +1,16 @@
+import { TestBed } from '@angular/core/testing';
+
+import { ShareService } from './share.service';
+
+describe('ShareService', () => {
+  let service: ShareService;
+
+  beforeEach(() => {
+    TestBed.configureTestingModule({});
+    service = TestBed.inject(ShareService);
+  });
+
+  it('should be created', () => {
+    expect(service).toBeTruthy();
+  });
+});
Index: tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.ts	(date 1588767522221)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/services/share.service.ts	(date 1588767522221)
@@ -0,0 +1,10 @@
+import {EventEmitter, Injectable, Output} from '@angular/core';
+
+@Injectable({
+  providedIn: 'root'
+})
+export class ShareService {
+  featureSelected = new EventEmitter<string>();
+
+  constructor() { }
+}
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.spec.ts	(date 1588767503843)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.spec.ts	(date 1588767503843)
@@ -0,0 +1,25 @@
+import { async, ComponentFixture, TestBed } from '@angular/core/testing';
+
+import { CartItemComponent } from './cart-item.component';
+
+describe('CartItemComponent', () => {
+  let component: CartItemComponent;
+  let fixture: ComponentFixture<CartItemComponent>;
+
+  beforeEach(async(() => {
+    TestBed.configureTestingModule({
+      declarations: [ CartItemComponent ]
+    })
+    .compileComponents();
+  }));
+
+  beforeEach(() => {
+    fixture = TestBed.createComponent(CartItemComponent);
+    component = fixture.componentInstance;
+    fixture.detectChanges();
+  });
+
+  it('should create', () => {
+    expect(component).toBeTruthy();
+  });
+});
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.css	(date 1588767503864)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.css	(date 1588767503864)
@@ -0,0 +1,17 @@
+.cart-item-wrapper {
+  /*border: 1px solid limegreen;*/
+  display: flex;
+  justify-content: space-between;
+
+}
+
+input {
+  text-align: center;
+  width: 60px;
+}
+
+.cart-item-wrapper > div {
+  flex-grow: 1;
+  color: #436f85;
+  text-align: center;
+}
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.ts	(date 1588779882803)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.ts	(date 1588779882803)
@@ -0,0 +1,47 @@
+import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';
+import {Product} from '../../../shared/product.model';
+import {UserService} from '../../../services/user.service';
+
+@Component({
+  selector: 'app-cart-item',
+  templateUrl: './cart-item.component.html',
+  styleUrls: ['./cart-item.component.css']
+})
+export class CartItemComponent implements OnInit {
+  @ViewChild('amountCartItem', {static: false}) amountCartItem: ElementRef;
+  @Input() cartItem: {k: Product, v: number};
+  @Output() cartItemDeleted = new EventEmitter<{
+    productSn: number,
+    storeId: number
+  }>();
+  @Output() cartItemChanged = new EventEmitter<{
+    productSn: number,
+    storeId: number
+  }>();
+
+  onCartItemDeleted(event) {
+
+    this.cartItemDeleted.emit({
+      productSn: this.cartItem.k.productSn,
+      storeId: this.cartItem.k.storeId
+    });
+  }
+
+  onCartItemChanged(event) {
+    this.userService.changeItemCartAmount(this.cartItem.k.productSn, this.cartItem.k.storeId, this.amountCartItem.nativeElement.value);
+    const sn = event.target.getAttribute('productSn');
+    const storeOfId = event.target.getAttribute('storeId');
+
+    this.cartItemChanged.emit({
+      productSn: sn,
+      storeId: storeOfId
+    });
+  }
+
+  constructor(private userService: UserService) {
+  }
+
+  ngOnInit() {
+  }
+
+}
Index: tradingSystemPresentation/TradingSystemWeb/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"trading-system-web\",\r\n  \"version\": \"0.0.0\",\r\n  \"scripts\": {\r\n    \"ng\": \"ng\",\r\n    \"start\": \"ng serve\",\r\n    \"build\": \"ng build\",\r\n    \"test\": \"ng test\",\r\n    \"lint\": \"ng lint\",\r\n    \"e2e\": \"ng e2e\"\r\n  },\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@angular/animations\": \"^9.1.4\",\r\n    \"@angular/cdk\": \"^9.2.1\",\r\n    \"@angular/common\": \"~9.1.1\",\r\n    \"@angular/compiler\": \"~9.1.1\",\r\n    \"@angular/core\": \"~9.1.1\",\r\n    \"@angular/forms\": \"~9.1.1\",\r\n    \"@angular/platform-browser\": \"~9.1.1\",\r\n    \"@angular/platform-browser-dynamic\": \"~9.1.1\",\r\n    \"@angular/router\": \"~9.1.1\",\r\n    \"angular-ui-notification\": \"^0.3.6\",\r\n    \"angular2-toaster\": \"^8.0.0\",\r\n    \"bootstrap\": \"^3.4.1\",\r\n    \"bulma\": \"^0.8.2\",\r\n    \"net\": \"^1.0.2\",\r\n    \"ng-snotify\": \"^9.0.1\",\r\n    \"ng2-search-filter\": \"^0.5.1\",\r\n    \"ng5-slider\": \"^1.2.4\",\r\n    \"ngx-bootstrap-slider\": \"^1.8.0\",\r\n    \"rxjs\": \"~6.5.4\",\r\n    \"sockjs-client\": \"^1.4.0\",\r\n    \"stompjs\": \"^2.3.3\",\r\n    \"tslib\": \"^1.10.0\",\r\n    \"web-animations-js\": \"2.3.1\",\r\n    \"zone.js\": \"~0.10.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@angular-devkit/build-angular\": \"~0.901.1\",\r\n    \"@angular/cli\": \"~9.1.1\",\r\n    \"@angular/compiler-cli\": \"~9.1.1\",\r\n    \"@angular/language-service\": \"~9.1.1\",\r\n    \"@types/node\": \"^12.11.1\",\r\n    \"@types/jasmine\": \"~3.5.0\",\r\n    \"@types/jasminewd2\": \"~2.0.3\",\r\n    \"codelyzer\": \"^5.1.2\",\r\n    \"jasmine-core\": \"~3.5.0\",\r\n    \"jasmine-spec-reporter\": \"~4.2.1\",\r\n    \"karma\": \"~4.4.1\",\r\n    \"karma-chrome-launcher\": \"~3.1.0\",\r\n    \"karma-coverage-istanbul-reporter\": \"~2.1.0\",\r\n    \"karma-jasmine\": \"~3.0.1\",\r\n    \"karma-jasmine-html-reporter\": \"^1.4.2\",\r\n    \"protractor\": \"~5.4.3\",\r\n    \"ts-node\": \"~8.3.0\",\r\n    \"tslint\": \"~6.1.0\",\r\n    \"typescript\": \"~3.8.3\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/package.json	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/package.json	(date 1588767521345)
@@ -25,6 +25,7 @@
     "bootstrap": "^3.4.1",
     "bulma": "^0.8.2",
     "net": "^1.0.2",
+    "ng-shopping-cart": "^1.0.0",
     "ng-snotify": "^9.0.1",
     "ng2-search-filter": "^0.5.1",
     "ng5-slider": "^1.2.4",
Index: tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.html	(date 1588779178417)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/guest/shopping-cart/cart-item/cart-item.component.html	(date 1588779178417)
@@ -0,0 +1,39 @@
+<div class="cart-item-wrapper"
+     [ngStyle]="{color: 'blue'}"
+>
+  <div>
+    {{cartItem.k.name}}
+  </div>
+  <div>
+    {{cartItem.k.cost}} USD
+  </div>
+  <div>
+    <input type="number"
+           value="cartItem.v"
+           placeholder="cartItem"
+           id="amount"
+           min=1
+           [(ngModel)]="cartItem.v"
+           (change)="onCartItemChanged($event)"
+           #amountCartItem
+    />
+  </div>
+  <div>
+    {{cartItem.v * cartItem.k.cost}} USD
+  </div>
+  <div>
+    <button type="button"
+            class="btn btn-default"
+            aria-label="Left Align"
+            (click)="onCartItemDeleted($event)"
+    >
+        <span class="glyphicon glyphicon-remove"
+              aria-hidden="true"
+              id={{cartItem.k.productSn}}>
+        </span>
+    </button>
+  </div>
+</div>
+
+
+
Index: tradingSystemPresentation/TradingSystemWeb/src/app/shared/ShoppingBag.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Product} from './product.model';\r\n\r\nexport class ShoppingBag {\r\n  constructor(public productListFromStore: Map<Product, number>) {}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/shared/ShoppingBag.model.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/shared/ShoppingBag.model.ts	(date 1588782162473)
@@ -1,5 +1,41 @@
 import {Product} from './product.model';
 
 export class ShoppingBag {
-  constructor(public productListFromStore: Map<Product, number>) {}
+  constructor(public productListFromStore: Map<Product, number>) {
+  }
+  addProductAmounts(productSn: number, amount: number) {
+    let product: Product = null;
+    this.productListFromStore.forEach(((value, key) => {
+      if (key.productSn === productSn) {
+        product = key;
+      }
+    }));
+    this.productListFromStore.set(product , amount);
+  }
+
+  removeCartItem(productSn: number) {
+    let product: Product = null;
+    this.productListFromStore.forEach(((value, key) => {
+      if (key.productSn === productSn) {
+        product = key;
+      }
+    }));
+    this.productListFromStore.delete(product);
+  }
+
+  addProduct(product: Product, amountProducts: number) {
+    const productFind = Array.from(this.productListFromStore.keys())
+      .filter((productCur) => productCur.productSn === product.productSn)
+      .pop();
+    if (productFind !== undefined){
+      console.log(this.productListFromStore.get(productFind));
+      console.log(amountProducts);
+      const amount = +this.productListFromStore.get(productFind) + +amountProducts;
+      console.log(amount);
+      this.productListFromStore.set(productFind, amount);
+    }else{
+      this.productListFromStore.set(product, amountProducts);
+    }
+  }
+
 }
Index: tradingSystemPresentation/TradingSystemWeb/src/app/services/user.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {EventEmitter, Injectable, Output} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserSystem} from '../shared/userSystem.model';\r\nimport {Product} from '../shared/product.model';\r\nimport {ShoppingCart} from '../shared/shoppingCart.model';\r\nimport {ShoppingBag} from '../shared/shoppingBag.model';\r\nimport {formatNumber} from '@angular/common';\r\nimport {Receipt} from '../shared/receipt.model';\r\nimport {Store} from '../shared/store.model';\r\nimport {HttpService} from './http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private shoppingCart: ShoppingCart;\r\n  private isAdmin: boolean;\r\n  private uuid: string;\r\n  private username: string;\r\n\r\n  // events\r\n  userLoggingEvent = new EventEmitter<boolean>();\r\n\r\n  registerEvent = new EventEmitter<boolean>();\r\n\r\n  userLogoutEvent = new EventEmitter<boolean>();\r\n  logoutNoEvent = new EventEmitter<boolean>();\r\n\r\n  userSelectedEvent = new EventEmitter<UserSystem>();\r\n\r\n  private usernameWantSeeHistory = null;\r\n\r\n  constructor(private httpService: HttpService) {\r\n    this.shoppingCart = new ShoppingCart(new Map<number, ShoppingBag>());\r\n  }\r\n\r\n  public register(username: string,\r\n                  password: string,\r\n                  firstName: string,\r\n                  lastName: string,\r\n                  image: File) {\r\n    this.httpService.registerUser(username, password, firstName, lastName, image)\r\n      .subscribe(response => {\r\n        if (response !== null && response === true) {\r\n          this.registerEvent.emit(true);\r\n        }else{\r\n          this.registerEvent.emit(false);\r\n        }\r\n      }, error => this.registerEvent.emit(false));\r\n  }\r\n\r\n  login(username: string, password: string) {\r\n    this.usernameWantSeeHistory = null; // need to remove from here\r\n    this.httpService.login(username, password).subscribe(\r\n      response => {\r\n        if (response !== null && response.key !== null ) {\r\n          this.uuid = response.key;\r\n          this.isAdmin = response.value;\r\n          this.username = username;\r\n          this.userLoggingEvent.emit(true);\r\n        }else{\r\n          this.userLoggingEvent.emit(false);\r\n        }\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    this.httpService.logout(this.username, this.uuid).subscribe(\r\n      response => {\r\n        if (response) {\r\n          this.uuid = null;\r\n          this.isAdmin = false;\r\n          this.userLogoutEvent.emit(true);\r\n        }else{\r\n          this.userLogoutEvent.emit(false);\r\n        }\r\n      });\r\n  }\r\n\r\n  addToShoppingCart(product: Product, amountProducts: number) {\r\n    const storeId = product.storeId;\r\n    let shoppingBag = this.shoppingCart.shoppingBags.get(storeId);\r\n    if (shoppingBag === undefined) {\r\n      const products = new Map<Product, number>();\r\n      products.set(product, amountProducts);\r\n      shoppingBag = new ShoppingBag(products);\r\n    }\r\n    this.shoppingCart.shoppingBags.set(storeId, shoppingBag);\r\n  }\r\n\r\n  viewPurchaseHistory() {\r\n    let receipts: Receipt[] = [];\r\n    this.httpService.viewPurchaseHistory(this.username, this.uuid)\r\n      .subscribe(res => receipts = res);\r\n\r\n    ///// need to delete///////\r\n    const map = new Map();\r\n    map.set(new Product(1, '2', 'sds', 1, 3232, 323, 1, 1, 'sdsd'), 3);\r\n    map.set(new Product(1, '2', 'sdsdsdds', 1, 232, 323, 1, 1, 'sdsd'), 3);\r\n\r\n    return [new Receipt(1, 1, 'sds', new Date(), 2, map)];\r\n    ///////////////\r\n\r\n    // return receipts;\r\n  }\r\n\r\n  getUsers() {\r\n    console.log(this.usernameWantSeeHistory);\r\n    if (this.usernameWantSeeHistory !== null) {\r\n      return [new UserSystem('ron', 'ron', 'asis'),\r\n        new UserSystem('ron1', 'ro1n11', 'asis1')];\r\n    } else {\r\n      return [new UserSystem('null', 'null', 'null'),\r\n        new UserSystem('null', 'null', 'null')];\r\n    }\r\n  }\r\n\r\n  wantViewPurchaseHistory(user: UserSystem) {\r\n    this.usernameWantSeeHistory = user.username;\r\n  }\r\n\r\n  public getUsername() {\r\n    return this.username;\r\n  }\r\n\r\n  public getIsAdmin() {\r\n    return this.isAdmin;\r\n  }\r\n\r\n  public getUuid() {\r\n    return this.uuid;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/services/user.service.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/services/user.service.ts	(date 1588782838336)
@@ -8,12 +8,13 @@
 import {Receipt} from '../shared/receipt.model';
 import {Store} from '../shared/store.model';
 import {HttpService} from './http.service';
+import {Observable, of} from 'rxjs';
 
 @Injectable({
   providedIn: 'root'
 })
 export class UserService {
-  private shoppingCart: ShoppingCart;
+  private readonly shoppingCart: ShoppingCart;
   private isAdmin: boolean;
   private uuid: string;
   private username: string;
@@ -43,7 +44,7 @@
       .subscribe(response => {
         if (response !== null && response === true) {
           this.registerEvent.emit(true);
-        }else{
+        } else {
           this.registerEvent.emit(false);
         }
       }, error => this.registerEvent.emit(false));
@@ -53,12 +54,12 @@
     this.usernameWantSeeHistory = null; // need to remove from here
     this.httpService.login(username, password).subscribe(
       response => {
-        if (response !== null && response.key !== null ) {
+        if (response !== null && response.key !== null) {
           this.uuid = response.key;
           this.isAdmin = response.value;
           this.username = username;
           this.userLoggingEvent.emit(true);
-        }else{
+        } else {
           this.userLoggingEvent.emit(false);
         }
       });
@@ -71,21 +72,16 @@
           this.uuid = null;
           this.isAdmin = false;
           this.userLogoutEvent.emit(true);
-        }else{
+        } else {
           this.userLogoutEvent.emit(false);
         }
       });
   }
 
   addToShoppingCart(product: Product, amountProducts: number) {
-    const storeId = product.storeId;
-    let shoppingBag = this.shoppingCart.shoppingBags.get(storeId);
-    if (shoppingBag === undefined) {
-      const products = new Map<Product, number>();
-      products.set(product, amountProducts);
-      shoppingBag = new ShoppingBag(products);
+    if (!this.isLoggingUser()) {
+      this.shoppingCart.addToShoppingCart(product, amountProducts);
     }
-    this.shoppingCart.shoppingBags.set(storeId, shoppingBag);
   }
 
   viewPurchaseHistory() {
@@ -130,4 +126,39 @@
   public getUuid() {
     return this.uuid;
   }
+
+  getShoppingCart() {
+    console.log(this.isLoggingUser());
+    if (!this.isLoggingUser()) {
+      console.log(this.shoppingCart);
+      return of(this.shoppingCart);
+    }else {
+      return null;
+      // return this.httpService.getShoppingCard(this.username, this.uuid);
+    }
+  }
+
+  isLoggingUser(){
+    return this.uuid !== null && this.uuid !== undefined;
+  }
+
+  changeItemCartAmount(productSn: number, storeId: number, amount: number) {
+    if (!this.isLoggingUser()){
+      this.shoppingCart.addProductAmounts(productSn, storeId, amount);
+    }
+  }
+
+  removeCartItem(productSn: number, storeId: number) {
+    if (!this.isLoggingUser()){
+      this.shoppingCart.removeCartItem(productSn, storeId);
+    }
+  }
+
+  getTotalPriceOfShoppingCart() {
+    if (!this.isLoggingUser()){
+        return this.httpService.getTotalPriceOfShoppingCart(this.shoppingCart);
+    }else{
+      return null;
+    }
+  }
 }
Index: tradingSystemPresentation/TradingSystemWeb/src/app/shared/shoppingCart.model.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Product} from './product.model';\r\nimport {ShoppingBag} from './shoppingBag.model';\r\n\r\nexport class ShoppingCart {\r\n  constructor(public shoppingBags: Map<number, ShoppingBag>) {}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tradingSystemPresentation/TradingSystemWeb/src/app/shared/shoppingCart.model.ts	(revision 1d67aaf3fb8717d6f558abe5f6a0a267c4e61fe1)
+++ tradingSystemPresentation/TradingSystemWeb/src/app/shared/shoppingCart.model.ts	(date 1588781044497)
@@ -3,4 +3,29 @@
 
 export class ShoppingCart {
   constructor(public shoppingBags: Map<number, ShoppingBag>) {}
+
+  public addProductAmounts(productSn: number, storeId: number, amount: number){
+    this.shoppingBags.get(storeId).addProductAmounts(productSn, amount);
+  }
+
+  removeCartItem(productSn: number, storeId: number) {
+    const shoppingBag = this.shoppingBags.get(storeId);
+    shoppingBag.removeCartItem(productSn);
+    if (shoppingBag.productListFromStore.size === 0){
+      this.shoppingBags.delete(storeId);
+    }
+  }
+
+  addToShoppingCart(product: Product, amountProducts: number) {
+    const storeId = product.storeId;
+    let shoppingBag = this.shoppingBags.get(storeId);
+    if (shoppingBag === undefined) {
+      const products = new Map<Product, number>();
+      products.set(product, amountProducts);
+      shoppingBag = new ShoppingBag(products);
+      this.shoppingBags.set(storeId, shoppingBag);
+    }else{
+      shoppingBag.addProduct(product, amountProducts);
+    }
+  }
 }
