package com.wsep202.TradingSystem.service.user_service;import com.wsep202.TradingSystem.dto.*;import externals.ChargeSystem;import externals.SupplySystem;import javafx.util.Pair;import lombok.Getter;import org.springframework.web.multipart.MultipartFile;import java.util.List;import java.util.UUID;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;@Getterpublic class ServiceTestsHelper {    GuestService guestService;    BuyerRegisteredService buyerRegisteredService;    SellerOwnerService sellerOwnerService;    private final String storeName = "store name";    private final String storeDescription = "description";    PaymentDetailsDto paymentDetailsDto = new PaymentDetailsDto("123456789",            "798", "123456789", "June", "2020", "username");    BillingAddressDto billingAddressDto = new BillingAddressDto("username",            "address", "city", "country", "1234567");    PurchaseRegisterBuyerDto purchaseRegisterBuyerDto = new PurchaseRegisterBuyerDto(            paymentDetailsDto, billingAddressDto);    //the external systems    private ChargeSystem chargeSystem;    private SupplySystem supplySystem;    public ServiceTestsHelper(GuestService guestService, BuyerRegisteredService buyerRegisteredService){        this.guestService = guestService;        this.buyerRegisteredService = buyerRegisteredService;        chargeSystem = mock(ChargeSystem.class);        supplySystem = mock(SupplySystem.class);    }    public ServiceTestsHelper(GuestService guestService, BuyerRegisteredService buyerRegisteredService,                              SellerOwnerService sellerOwnerService){        this.guestService = guestService;        this.buyerRegisteredService = buyerRegisteredService;        this.sellerOwnerService = sellerOwnerService;        chargeSystem = mock(ChargeSystem.class);        supplySystem = mock(SupplySystem.class);    }    /**     * register user into the system     */    public boolean registerUser(String username,                                String password,                                String firstName,                                String lastName,                                MultipartFile image) {        return this.guestService.registerUser(username, password,                firstName,lastName, image);    }    /**     * login a user into the system     */    public Pair<UUID, Boolean> loginUser(String username, String password) {        return this.guestService.login(username, password);    }    /**     * login a user into the system     */    public Pair<UUID, Boolean> registerAndLoginUser(String username,                                                    String password,                                                    String firstName,                                                    String lastName,                                                    MultipartFile image) {        if (!this.guestService.registerUser(username, password, firstName, lastName, image)){            return null;        }        return this.guestService.login(username, password);    }    /**     * logout a user from the system     */    public boolean logoutUser(String username, UUID uuid) {        return this.buyerRegisteredService.logout(username, uuid);    }    /**     * opening a new store and adding a product to it     */    //openStoreAndAddProducts    public Pair<Integer, ProductDto> openStoreAndAddProduct(UserSystemDto owner, UUID uuid){        // opening a new store, owned by owner        StoreDto store = this.buyerRegisteredService.openStore(owner.getUserName(), this.storeName,                this.storeDescription, uuid);        // adding a product to the owner's store        ProductDto product = this.sellerOwnerService.addProduct(owner.getUserName(), store.getStoreId(),                "motor", "motors", 200, 20, uuid);        return new Pair<> (store.getStoreId(), product);    }    /**     * opening a new store and adding a product to it     */    //openStoreAndAddProducts    public Pair<Integer, ProductDto> createOwnerOpenStoreAndAddProduct(){        UserSystemDto owner = new UserSystemDto("owner","owner","owner");        String ownerPassword = "password";        // registering the owner        this.registerUser(owner.getUserName(), ownerPassword,                owner.getFirstName(), owner.getLastName(), null);        // login the user        Pair<UUID, Boolean> returnedValueLogin = this.loginUser(owner.getUserName(), ownerPassword);        Pair<Integer, ProductDto> returnedValueOpen = openStoreAndAddProduct(owner, returnedValueLogin.getKey());        // owner logout        logoutUser(owner.getUserName(), returnedValueLogin.getKey());        return returnedValueOpen;    }    //addProductToShoppingCart    // openStoreAddProductsAndAddProductToShoppingCart    public Pair<Integer, ProductDto> createOwnerOpenStoreAddProductAndAddToShoppingCart(String username, UUID uuid) {        int amount = 1;        Pair<Integer, ProductDto> returnedValueOpen = createOwnerOpenStoreAndAddProduct();        this.buyerRegisteredService.addProductToShoppingCart(username, amount,                returnedValueOpen.getValue(), uuid);        return returnedValueOpen;    }    /**     * buying a product from the store     */    // openStoreAddProductsAndPurchaseShoppingCart    // openStoreAddProductsAndBuyProduct    public Pair <Integer, List<ReceiptDto>> createOwnerOpenStoreAddProductAddAndPurchaseShoppingCart(String username, UUID uuid){        Pair<Integer, ProductDto> returnedValue = createOwnerOpenStoreAddProductAndAddToShoppingCart(username, uuid);        when(chargeSystem.sendPaymentTransaction(any(), any())).thenReturn(10002);        when(supplySystem.deliver(any(), any())).thenReturn(11003);        List<ReceiptDto> receiptDtoList = this.buyerRegisteredService.purchaseShoppingCartBuyer(username,                this.purchaseRegisterBuyerDto, uuid);        return new Pair <>(returnedValue.getKey(), receiptDtoList);    }    //openStoreAddProductsAndAddManager    public Integer openStoreAddProductAndAddManager(UserSystemDto userSystemDto, UUID uuid, String newManager){        String username = userSystemDto.getUserName();        Pair<Integer, ProductDto> returnedValue = openStoreAndAddProduct(userSystemDto, uuid);        this.sellerOwnerService.addManager(username, returnedValue.getKey(), newManager, uuid);        return returnedValue.getKey();    }    public Integer openStoreAddProductAndAddOwner(UserSystemDto userSystemDto, UUID uuid, String newOwner){        String username = userSystemDto.getUserName();        Pair<Integer, ProductDto> returnedValue = openStoreAndAddProduct(userSystemDto, uuid);        this.sellerOwnerService.addOwner(username, returnedValue.getKey(), newOwner, uuid);        return returnedValue.getKey();    }    public boolean addStoreOwner(String ownerUsername, int storeId, String newOwnerUsername, UUID uuid){        return this.sellerOwnerService.addOwner(ownerUsername, storeId, newOwnerUsername, uuid);    }    public List<ReceiptDto> addProductToShoppingCartAndPurchase(String user, int storeId, int productSn, UUID uuid){        this.buyerRegisteredService.saveProductInShoppingBag(user, storeId, productSn, 1, uuid);        when(chargeSystem.sendPaymentTransaction(any(), any())).thenReturn(10002);        when(supplySystem.deliver(any(), any())).thenReturn(11003);        return this.buyerRegisteredService.purchaseShoppingCartBuyer(user,this.purchaseRegisterBuyerDto, uuid);    }    public List<ReceiptDto> addProductToShoppingCartAndPurchaseAndAppointManager(String user, int storeId, int productSn, UUID uuid, String manager){        this.sellerOwnerService.addManager(user, storeId, manager, uuid);        this.buyerRegisteredService.saveProductInShoppingBag(user, storeId, productSn, 1, uuid);        when(chargeSystem.sendPaymentTransaction(any(), any())).thenReturn(10002);        when(supplySystem.deliver(any(), any())).thenReturn(11003);        return this.buyerRegisteredService.purchaseShoppingCartBuyer(user,this.purchaseRegisterBuyerDto, uuid);    }    public void addPermission(String owner, int storeId, String manager, String permission, UUID uuid) {        this.sellerOwnerService.addPermission(owner, storeId, manager, permission, uuid);    }}